"""Add demo session and signup tables

Revision ID: 4aa497b95d66
Revises: 5a41e7aa62a8
Create Date: 2025-06-27 11:55:07.992109

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4aa497b95d66'
down_revision: Union[str, None] = '5a41e7aa62a8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name: str) -> bool:
    """Check if a table exists in the database."""
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    return inspector.has_table(table_name)


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create demo_session table if it doesn't exist
    if not table_exists('demo_session'):
        op.create_table('demo_session',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_date', sa.Date(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('is_cancelled', sa.Boolean(), nullable=False),
        sa.Column('max_scheduled', sa.Integer(), nullable=True),
        sa.Column('title', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('notes', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_demo_session_session_date'), 'demo_session', ['session_date'], unique=False)
    
    # Create user_session table if it doesn't exist
    if not table_exists('user_session'):
        op.create_table('user_session',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('session_token', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('last_activity', sa.DateTime(), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.Column('ip_address', sa.String(), nullable=True),
        sa.Column('user_agent', sa.String(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_user_session_session_token'), 'user_session', ['session_token'], unique=True)
    
    # Create admin_activity_log table if it doesn't exist
    if not table_exists('admin_activity_log'):
        op.create_table('admin_activity_log',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('admin_user_id', sa.Integer(), nullable=False),
        sa.Column('action', sa.String(), nullable=False),
        sa.Column('target_user_id', sa.Integer(), nullable=True),
        sa.Column('target_student_id', sa.Integer(), nullable=True),
        sa.Column('details', sa.String(), nullable=True),
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('ip_address', sa.String(), nullable=True),
        sa.Column('user_agent', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['admin_user_id'], ['user.id'], ),
        sa.ForeignKeyConstraint(['target_student_id'], ['student.id'], ),
        sa.ForeignKeyConstraint(['target_user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Create demo_signup table if it doesn't exist
    if not table_exists('demo_signup'):
        op.create_table('demo_signup',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_id', sa.Integer(), nullable=False),
        sa.Column('student_id', sa.Integer(), nullable=False),
        sa.Column('demo_id', sa.Integer(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('signup_notes', sa.String(), nullable=True),
        sa.Column('did_present', sa.Boolean(), nullable=True),
        sa.Column('presentation_notes', sa.String(), nullable=True),
        sa.Column('presentation_rating', sa.Integer(), nullable=True),
        sa.Column('scheduled_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['demo_id'], ['demo.id'], ),
        sa.ForeignKeyConstraint(['session_id'], ['demo_session.id'], ),
        sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_id', 'student_id', name='unique_student_session')
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Only drop tables if they exist
    if table_exists('demo_signup'):
        op.drop_table('demo_signup')
    
    if table_exists('admin_activity_log'):
        op.drop_table('admin_activity_log')
    
    if table_exists('user_session'):
        op.drop_index(op.f('ix_user_session_session_token'), table_name='user_session')
        op.drop_table('user_session')
    
    if table_exists('demo_session'):
        op.drop_index(op.f('ix_demo_session_session_date'), table_name='demo_session')
        op.drop_table('demo_session')
    # ### end Alembic commands ###
